# Mapper Development Rules
When applying a rule, reference its number (e.g., "[001]"). Abbreviations for rule descriptions are allowed.

---

## Code Organization
- [001] Structure: Use `src/components/{feature}/`; Supabase tables must be `map_` or `maps_`; hooks in `src/hooks/`; type definitions in `src/types/`; keep changes minimal.

## TypeScript Best Practices
- [101] Enforce: Explicit return types, prefer interfaces, use discriminated unions, strict null checks.

## Component Guidelines
- [201] Components: Limit to ~100 lines; use custom hooks for complex logic; properly clean up `useEffect`; apply error boundaries for critical UI parts.

## Data Visualization
- [301] Charts: Maintain consistent theming, strongly type chart data, display loading states, handle empty/error scenarios.

## Map Interactions
- [401] Map: Apply suitable zoom, clustering for large data, boundary checks, caching when feasible.

## Performance
- [501] Efficiency: Paginate large data, memoize expensive renders, optimize map markers and queries.

## Error Handling
- [601] Errors: Log with context, provide clear messages, handle network failures gracefully, ensure payment error coverage.

## Security
- [701] RLS & Anonymous: Use RLS except for anonymous tracking; never log sensitive data; handle CORS and secure payment flows.

## Authentication & Session Management
- [751] Single Admin: `admin@libralab.ai` is the only authenticated user.
- [752] Anonymous Users: All others tracked as leads in `map_analytics_events`; store no PII; maintain session consistency; remove inactive sessions; use timeouts.
- [753] No Extra Auth: Do not introduce additional auth methods or user roles.
- [754] Admin Data Only: Never store user data other than admin.

## Git Workflow
- [801] Commits & Changelog: Use conventional commit messages; maintain a changelog for notable updates.
- [802] Migrations & TS: Run migrations in order; update TypeScript types after schema changes.

## UI/UX Guidelines
- [901] Approval: No UI changes without explicit user request.
- [903] Consistency & Accessibility: Keep styles uniform; include accessibility; prioritize mobile-first.
- [906] Dark Mode & Contrast: Provide functioning dark mode; ensure ≥4.5:1 contrast; test all states.
- [908] Third-Party Components: Document usage/selectors; note `!important` overrides and CSS/styled-components differences.
- [909] CSS Overrides: Use direct selectors if Tailwind is insufficient; track `!important` usage and library conflicts.

## Documentation Guidelines
- [1001] Comments: Document non-obvious code; keep `README` and `.env.example` current.
- [1004] JSDoc & Examples: Document public functions/interfaces; provide usage demos for complex components.
- [1006] Schema & API: Keep Supabase schema, relationships, and changelog updated; document chart/map config.

## Database Schema Access
- [1101] Verification: Always request current schema info; confirm constraints before changing TS types.

## Error Resolution Strategy
- [1201] Root Cause: Investigate thoroughly first; apply minimal necessary fix; plan migrations with rollback.

## Component Reuse & Organization
- [8001] Avoid Dupes: Search existing code and shared UI for reuse.
- [8002] Centralize: Place common badges/elements in shared components.

## Technical Changes vs UI Impact
- [910] Evaluate UI: Data changes must be checked for UI effects.
- [911] Preserve Interfaces: Don’t alter data interfaces without approval.
- [912] Breaking Changes: Require user sign-off for changes affecting UI.
- [913] Dependencies: Document UI dependencies on data structures.

## Change Scope Control
- [920] Single Responsibility: Each change addresses one purpose; avoid scope creep.
- [922] Isolate Tech: Separate technical updates from UI modifications.
- [923] Preserve Features: Maintain existing functionality unless explicitly removed.

## Documentation & Review
- [930] Potential Impact: Document any UI impacts from data changes.
- [931] Mapping: Keep references of data-to-UI dependencies.
- [932] Validation: Review changes for unintended UI side effects.

## Windsurf-Specific
- [9001] .windsurfrules: Suggest best-practice additions automatically.
- [9002] Rule Drafts: Provide markdown drafts only; do not edit `.windsurfrules` directly.