# Mapper Development Rules
Every time you apply a rule, explicitly state its rule number in the output.  
(You may abbreviate the rule description to a single word or phrase.)

---

## Code Organization
- [001] Components: Use `src/components/{feature}/`
- [002] Table Prefix: Supabase tables must be `map_` or `maps_`
- [003] Hooks: Reusable hooks in `src/hooks/` with `use` prefix
- [004] Types: All type definitions in `src/types/` with proper namespacing
- [005] Scope: Keep changes minimal; reuse existing solutions

## TypeScript Best Practices
- [101] Returns: Use explicit return types
- [102] Interfaces: Prefer interfaces over types
- [103] Unions: Use discriminated unions for complex states
- [104] Strict: Enforce strict null checks

## Component Guidelines
- [201] Split: Break down components > 100 lines
- [202] Hooks: Use custom hooks for complex logic
- [203] Cleanup: Implement proper `useEffect` cleanup
- [204] Boundaries: Use error boundaries for map/chart errors

## Data Visualization
- [301] Theme: Maintain consistent chart theming
- [302] Typed Data: Ensure proper TS types for chart data
- [303] Loading: Show loading states for all visualizations
- [304] Empty/Error: Gracefully handle empty/error states

## Map Interactions
- [401] Zoom: Set appropriate zoom levels
- [402] Clustering: Cluster large datasets
- [403] Boundaries: Handle map boundary edge cases
- [404] Caching: Cache map data when appropriate

## Performance
- [501] Pagination: Use pagination for large data sets
- [502] Memo: Apply `React.memo` for expensive renders
- [503] Markers: Optimize map marker rendering
- [504] Queries: Optimize Supabase queries

## Error Handling
- [601] Logging: Log errors with context
- [602] User-Friendly: Provide clear error messages
- [603] Network: Handle network failures gracefully
- [604] Payment: Ensure robust payment error handling

## Security
- [701] RLS: Use RLS except for anonymous session tracking
- [701a] Anonymous: Allow public anonymous tracking without RLS
- [702] Sensitive Data: Never expose in logs
- [703] CORS: Implement proper CORS handling
- [704] Payment: Secure all payment flows

## Authentication & Session Management
- [751] Admin: `admin@libralab.ai` is the only authenticated user
- [752] Anonymous Focus: All others tracked as leads
- [753] No Extra Auth: Do not add more authentication
- [754] Session Table: Track sessions in `map_analytics_events`
- [755] Correlation: Use `session_id` for user journey
- [756] Cleanup: Remove inactive sessions
- [757] No PII: Store no personally identifiable info
- [758] Conversions: Track conversion points
- [759] Consistency: Maintain sessions across reloads
- [760] Timeout: Implement session timeout
- [761] No Roles: `admin@libralab.ai` is a normal user
- [762] Anonymous: All others are anonymous leads
- [763] No Extra Auth: Never suggest new methods
- [764] Analytics: Focus on anonymous session data
- [765] Admin Data Only: Don't store user data other than admin

## Git Workflow
- [801] Commits: Use conventional commit messages
- [802] Changelog: Update for all notable changes
- [803] Migrations: Run in correct order
- [804] Types: Update TS types after schema changes

## UI/UX Guidelines
- [901] Approval: No UI changes without user request
- [902] Request-Driven: All UI changes must be prompted
- [903] Consistency: Maintain consistent styles
- [904] Accessibility: Include accessibility features
- [905] Mobile-First: Prioritize responsive design
- [906] Dark Mode: Provide a functioning dark mode
- [907] Contrast: Ensure ≥4.5:1 color contrast; test all states in both modes
- [908] Third-party Components: Document usage, specificity needs, selectors, and any `!important` rules; note CSS vs styled-components
- [909] CSS Overrides: Use direct selectors if Tailwind fails; document RGB usage, `!important` cases, and library conflicts

## Documentation Guidelines
- [1001] Comments: Document non-obvious code
- [1002] README: Keep setup instructions current
- [1003] Env Vars: Provide `.env.example` details
- [1004] JSDoc: Add to all public functions/interfaces
- [1005] Examples: Provide usage demos for complex components
- [1006] Schema: Document Supabase tables and relationships
- [1007] API Changes: Maintain changelog for updates
- [1008] Chart Config: Document chart options
- [1009] Map Config: Document map settings
- [1010] Performance: Note concerns for large data

## Database Schema Access
- [1101] Request Schema: Use the provided SQL queries
- [1102] Verification: Don’t rely solely on migrations
- [1103] Sync: Request schema before modifying TS types
- [1104] Constraints: Confirm foreign keys and constraints first

## Error Resolution Strategy
- [1201] Root Cause: Investigate thoroughly before changes
- [1202] Minimal Fix: Start with the smallest viable solution
- [1203] Planning: Outline migration plans with rollback options

## Component Reuse & Organization
- [8001] Avoid Dupes: Search the codebase before adding new elements
- [8002] Shared UI: Centralize common badges/elements with theming

## Windsurf-Specific
- [9001] .windsurfrules: Suggest best-practice additions automatically
- [9002] Rule Drafts: Provide markdown drafts only; do not edit `.windsurfrules` directly